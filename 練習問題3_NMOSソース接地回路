```python
import numpy as np
import matplotlib.pyplot as plt

# Constants
VDD = 3.3  # Supply voltage (V)
R_D = 1e3  # Drain resistance (1kÎ©)
I_D_bias = 1e-3  # Bias current (1mA)
V_ampl = 0.025  # Amplitude (50mVpp => 25mV)
frequency = 1e3  # Input signal frequency (1kHz)
time = np.linspace(0, 5e-3, 1000)  # Time from 0 to 5ms

# Set bias value
VGS_bias = 1.5  # Fixed bias voltage (V)

# Calculate input signal VGS
VGS = V_ampl * np.sin(2 * np.pi * frequency * time) + VGS_bias  # Sine wave with bias

# Fixed drain-source voltage
VDS_fixed = 1.0  # Fixed drain-source voltage (V)

# Calculate drain current I_D (considering channel length modulation)
Vth = 0.7  # Threshold voltage (V)
mu_n = 200e-4  # Carrier mobility (m^2/Vs)
Cox = 1e-6  # Oxide capacitance (F/m^2)
W = 10e-6  # Width (m)
L = 0.5e-6  # Length (m)
lambda_channel = 0.1  # Channel length modulation coefficient

# Drain current calculation
I_D = mu_n * Cox * (W / L) * ((VGS - Vth) * VDS_fixed - 0.5 * VDS_fixed**2) * (1 + lambda_channel * VDS_fixed)
I_D[VGS < Vth] = 0  # I_D is 0 if VGS < Vth

# Calculate output voltage Vout
Vout = VDD - R_D * I_D  # Calculate output voltage

# Create plots
plt.figure(figsize=(12, 12))

# VGS plot
plt.subplot(4, 1, 1)
plt.plot(time, VGS, label='VGS (Gate-Source Voltage)', color='blue')
plt.title('Gate-Source Voltage VGS')
plt.xlabel('Time (s)')
plt.ylabel('Voltage (V)')
plt.grid()
plt.legend()

# Vout plot
plt.subplot(4, 1, 2)
plt.plot(time, Vout, label='Vout (Output Voltage)', color='green')
plt.title('Output Voltage Vout')
plt.xlabel('Time (s)')
plt.ylabel('Voltage (V)')
plt.grid()
plt.legend()

# Display fixed VDS value
plt.subplot(4, 1, 3)
plt.axis('off')  # Turn off axes
plt.text(0.5, 0.5, f'Fixed Drain-Source Voltage VDS: {VDS_fixed} V', 
         fontsize=14, ha='center', va='center')

# I_D plot
plt.subplot(4, 1, 4)
plt.plot(time, I_D, label='I_D (Drain Current)', color='orange')
plt.title('Drain Current I_D')
plt.xlabel('Time (s)')
plt.ylabel('Current (A)')
plt.grid()
plt.legend()

# Add text for drain current calculation at a suitable position
plt.figtext(0.5, 0.01, 'I_D Calculation: I_D = mu_n * Cox * (W/L) * ((VGS - Vth) * VDS_fixed - 0.5 * VDS_fixed^2) * (1 + lambda_channel * VDS_fixed)', 
            fontsize=10, ha='center')

plt.tight_layout()
plt.show()
```
