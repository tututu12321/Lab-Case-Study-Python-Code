import numpy as np
import matplotlib.pyplot as plt

# Parameters
V_ref = 2.0  # Full scale of ADC (0-2V peak-to-peak)
ADC_bits = 8  # Number of bits for the ADC and DAC
V_LSB = V_ref / (2**ADC_bits)  # 1 LSB voltage for 8-bit ADC
frequency_sine = 10  # Frequency of the sine wave (10 Hz, can vary)
frequency_triangle = 10  # Frequency of the triangle wave (10 Hz)
sampling_rate = 1000  # Sampling rate in Hz
duration = 0.1  # Duration of the signal in seconds

# Generate time vector
time = np.linspace(0, duration, int(sampling_rate * duration))

# Generate sine wave input signal (0-2V peak-to-peak)
sine_wave = V_ref / 2 * (np.sin(2 * np.pi * frequency_sine * time) + 1)

# Generate triangle wave input signal (0-2V peak-to-peak)
triangle_wave = V_ref * (2 * np.abs((time * frequency_triangle) % 1 - 0.5))

# Simulate ADC quantization for sine wave
adc_output_sine = np.round(sine_wave / V_LSB) * V_LSB
adc_output_sine = np.clip(adc_output_sine, 0, V_ref)  # Ensure within ADC range

# Simulate ADC quantization for triangle wave
adc_output_triangle = np.round(triangle_wave / V_LSB) * V_LSB
adc_output_triangle = np.clip(adc_output_triangle, 0, V_ref)  # Ensure within ADC range

# DAC reconstruction (assume perfect DAC)
dac_output_sine = adc_output_sine  # DAC output for sine wave
dac_output_triangle = adc_output_triangle  # DAC output for triangle wave

# Calculate quantization error
quantization_error_sine = sine_wave - dac_output_sine
quantization_error_triangle = triangle_wave - dac_output_triangle

# Plotting the results
plt.figure(figsize=(12, 16))

# Sine wave input and quantized output
plt.subplot(4, 1, 1)
plt.plot(time, sine_wave, label="Input Sine Wave (0-2V)", color="blue")
plt.step(time, dac_output_sine, label="Quantized Output (ADC/DAC)", color="red", where="post")
plt.title("Sine Wave Input and Quantized Output from ADC/DAC")
plt.xlabel("Time (s)")
plt.ylabel("Voltage (V)")
plt.legend()
plt.grid(True)

# Quantization error for sine wave
plt.subplot(4, 1, 2)
plt.plot(time, quantization_error_sine, label="Quantization Error (Sine Wave)", color="purple")
plt.axhline(V_LSB / 2, color="green", linestyle="--", label="+1 LSB/2")
plt.axhline(-V_LSB / 2, color="green", linestyle="--", label="-1 LSB/2")
plt.title("Quantization Error for Sine Wave with ±1 LSB Reference")
plt.xlabel("Time (s)")
plt.ylabel("Error (V)")
plt.legend()
plt.grid(True)

# Triangle wave input and quantized output
plt.subplot(4, 1, 3)
plt.plot(time, triangle_wave, label="Input Triangle Wave (0-2V)", color="blue")
plt.step(time, dac_output_triangle, label="Quantized Output (ADC/DAC)", color="red", where="post")
plt.title("Triangle Wave Input and Quantized Output from ADC/DAC")
plt.xlabel("Time (s)")
plt.ylabel("Voltage (V)")
plt.legend()
plt.grid(True)

# Quantization error for triangle wave
plt.subplot(4, 1, 4)
plt.plot(time, quantization_error_triangle, label="Quantization Error (Triangle Wave)", color="purple")
plt.axhline(V_LSB / 2, color="green", linestyle="--", label="+1 LSB/2")
plt.axhline(-V_LSB / 2, color="green", linestyle="--", label="-1 LSB/2")
plt.title("Quantization Error for Triangle Wave with ±1 LSB Reference")
plt.xlabel("Time (s)")
plt.ylabel("Error (V)")
plt.legend()
plt.grid(True)

plt.tight_layout()
plt.show()

# Print 1 LSB value for reference
print(f"1 LSB for the ADC/DAC system: {V_LSB:.4f} V")
