import numpy as np
import matplotlib.pyplot as plt
from scipy.fft import fft, fftfreq

# Parameters
Fs = 2 ** 14  # Sampling rate
T = 1 / Fs  # Sampling period
N = 2 ** 12  # Number of samples
frequency = 17  # Input sine wave frequency in Hz
A = 1  # Amplitude of the input sine wave
b1, b2 = 1, 0.5  # Feedback gain coefficients for the DSM

# Time array
t = np.arange(0, N * T, T)

# Generate input sine wave
sine_wave = A * np.sin(2 * np.pi * frequency * t)

# Delta-Sigma Modulator Simulation
def delta_sigma_modulator(input_signal, b1, b2):
    output_signal = np.zeros(len(input_signal))
    integrator1 = 0
    integrator2 = 0

    for i in range(1, len(input_signal)):
        integrator1 += input_signal[i] - b1 * output_signal[i - 1]
        integrator2 += integrator1 - b2 * output_signal[i - 1]
        output_signal[i] = 1 if integrator2 >= 0 else -1  # Quantizer (sign function)

    return output_signal

# Apply the Delta-Sigma Modulator to the input sine wave
modulated_signal = delta_sigma_modulator(sine_wave, b1, b2)

# FFT and Power Spectrum Calculation
def power_spectrum(signal, Fs):
    N = len(signal)
    yf = fft(signal)
    xf = fftfreq(N, 1 / Fs)
    power_spectrum = 20 * np.log10(np.abs(yf[:N // 2]) / N)  # dB scale
    return xf[:N // 2], power_spectrum

# Calculate the power spectrum of the modulated signal
frequencies, power = power_spectrum(modulated_signal, Fs)

# Plot the input and modulated signals
plt.figure(figsize=(12, 6))

plt.subplot(2, 1, 1)
plt.plot(t[:1000], sine_wave[:1000], label="Input Sine Wave")
plt.plot(t[:1000], modulated_signal[:1000], label="DSM Output", linestyle="--")
plt.title("Input Sine Wave and DSM Modulated Signal")
plt.xlabel("Time [s]")
plt.ylabel("Amplitude")
plt.legend()

# Plot the power spectrum of the DSM output
plt.subplot(2, 1, 2)
plt.plot(frequencies, power)
plt.title("Power Spectrum of DSM Modulated Signal")
plt.xlabel("Frequency [Hz]")
plt.ylabel("Power [dB]")
plt.xlim(0, Fs / 2)
plt.grid()

plt.tight_layout()
plt.show()
